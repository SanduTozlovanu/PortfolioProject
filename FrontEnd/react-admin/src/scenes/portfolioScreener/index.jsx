import {Avatar, Box, Button, CircularProgress, Typography, useTheme} from "@mui/material";
import {tokens} from "../../theme";
import {useNavigate, useParams} from 'react-router-dom';
import Topbar from "../global/Topbar";
import axios from "axios";
import config from "../../config.json";
import React, {useEffect, useState} from "react";
import {DataGrid} from "@mui/x-data-grid";

const PortfolioScreener = () => {
    const theme = useTheme();
    const colors = tokens(theme.palette.mode);
    const navigate = useNavigate();
    const {strategy_name} = useParams();
    const [portfolioData, setPortfolioData] = useState([]);
    const [columns, setColumns] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    let title = ''
    switch (strategy_name) {
        case 'equalWeight':
            title = "Equal-Weight S&P 500 Index Fund Investing";
            break;
        case 'weighted':
            title = "Weighted S&P 500 Index Fund Investing";
            break;
        case 'momentum':
            title = "Quantitative Momentum Investing";
            break;
        case 'value':
            title = "Quantitative Value Investing";
            break;
        case 'valueMomentum':
            title = "Quantitative Momentum & Value Investing";
            break;
    }
    useEffect(() => {
        getGeneratedPortfolio()
    }, []);

    const generateButtonStyle = {
        marginBottom: 20,
        color: colors.primary[500],
        fontSize: 20,
        fontWeight: "bold",
        backgroundColor: colors.greenAccent[400]
    };
    const BuyGeneratedPortfolio = async () => {
        try {
            await axios.post(`${config.url}/portfolio/stock/buy/batch`,
                {
                    portfolioData
                },
                {
                    headers: {
                        Authorization: JSON.parse(localStorage.getItem("user")).token,
                    }

                });
            navigate("/myPortfolio");
        } catch (error) {
            console.log(error)
            setIsLoading(false)
        }
    }
    const getGeneratedPortfolio = async () => {
        const headers = {
            headers: {
                Authorization: JSON.parse(localStorage.getItem("user")).token,
            },

        }
        console.log(headers)
        try {
            const response = await axios.get(`${config.url}/portfolio/create/${strategy_name}`, headers);
            setPortfolioData(response.data.data)
            let renderedColumns = response.data.columns
            renderedColumns[1].renderCell = (params) => (
                <span>
                    <Box display="flex" justifyContent="row">
                    <Avatar src={"https://financialmodelingprep.com/image-stock/" + params.row.ticker + ".png"}
                            alt="Image" style={{width: "24px", height: "24px", marginRight: "2px"}}/>
                    {params.row.ticker}
                    </Box>
                </span>
            );
            renderedColumns[2].renderCell = (params) => (
                <span>
                    <Typography color={colors.greenAccent[400]}>{params.row.price}$</Typography>
                </span>
            );
            renderedColumns[3].renderCell = (params) => (
                <span>
                    <Typography>{params.row.quantity} pcs.</Typography>
                </span>
            );

            setColumns(renderedColumns)
            console.log("Columns are " + response.data.columns)
            setIsLoading(false)
        } catch (error) {
            console.log(error)
            setIsLoading(false)
        }
    }
    if (isLoading) {
        return (
            <Box m="20px">
                <Topbar title={title} subtitle="Portfolio generated by this strategy"
                        ticker={strategy_name} isTicker={false}/>
                <Box sx={{display: 'flex', justifyContent: "center", alignItems: "center", height: "70vh"}}>
                    <Typography variant="h3" marginRight="10px">Creating Portfolio...</Typography>
                    <CircularProgress sx={{color: colors.primary[300]}}/>
                </Box>
            </Box>
        );
    }
    return (
        <Box m="20px">
            <Topbar title={title} subtitle="Portfolio generated by this strategy"
                    ticker={strategy_name} isTicker={false}/>
            <Box display='flex' justifyContent="center" alignItems="center">
                <Button variant="contained" size="large" style={generateButtonStyle} onClick={BuyGeneratedPortfolio}>Buy selected stocks</Button>
            </Box>
            <Box
                height="75vh"
                sx={{
                    "& .MuiDataGrid-root": {
                        border: "none",
                    },
                    "& .MuiDataGrid-cell": {
                        borderBottom: "none",
                        fontSize: "15px"
                    },
                    "& .name-column--cell": {
                        color: colors.greenAccent[300],
                    },
                    "& .MuiDataGrid-columnHeaders": {
                        backgroundColor: colors.blueAccent[700],
                        borderBottom: "none",
                        fontSize: "15px"
                    },
                    "& .MuiDataGrid-virtualScroller": {
                        backgroundColor: colors.primary[400]
                    },
                    "& .MuiDataGrid-footerContainer": {
                        borderTop: "none",
                        backgroundColor: colors.blueAccent[700],
                        fontSize: "15px"
                    },
                    "& .MuiCheckbox-root": {
                        color: `${colors.greenAccent[200]} !important`,
                    },
                    ".buy-row": {color: colors.greenAccent[500]},
                    ".sell-row": {color: colors.redAccent[500]}
                }}
            >
                <DataGrid rows={portfolioData} columns={columns}/>
            </Box>
        </Box>
    )
        ;
};

export default PortfolioScreener;
